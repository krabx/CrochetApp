//
//  Start.swift
//  Crochet
//
//  Created by BR on 13.06.2023.
//  Copyright Â© 2023 CompanyName. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//
//  This code was generated by Trial version of PaintCode, therefore cannot be used for commercial purposes.
//



import UIKit

public class Start : NSObject {

    //// Drawing Methods

//    @objc dynamic public class func drawElement1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 179, height: 100), resizing: ResizingBehavior = .aspectFit, fillColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {
//        //// General Declarations
//        let context = UIGraphicsGetCurrentContext()!
//        
//        //// Resize to Target Frame
//        context.saveGState()
//        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 179, height: 100), target: targetFrame)
//        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
//        context.scaleBy(x: resizedFrame.width / 179, y: resizedFrame.height / 100)
//
//
//        //// Oval Drawing
//        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 4.5, y: 1.5, width: 170, height: 96))
//        fillColor.setFill()
//        ovalPath.fill()
//        fillColor.setStroke()
//        ovalPath.lineWidth = 3
//        ovalPath.stroke()
//        
//        context.restoreGState()
//
//    }
//
//    @objc dynamic public class func drawCanvas1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 150, height: 144), resizing: ResizingBehavior = .aspectFit, fillColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {
//        //// General Declarations
//        let context = UIGraphicsGetCurrentContext()!
//        
//        //// Resize to Target Frame
//        context.saveGState()
//        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 150, height: 144), target: targetFrame)
//        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
//        context.scaleBy(x: resizedFrame.width / 150, y: resizedFrame.height / 144)
//
//
//        //// Bezier 2 Drawing
//        let bezier2Path = UIBezierPath()
//        bezier2Path.move(to: CGPoint(x: 21.5, y: 3.5))
//        bezier2Path.addLine(to: CGPoint(x: 129.5, y: 3.5))
//        fillColor.setFill()
//        bezier2Path.fill()
//        fillColor.setStroke()
//        bezier2Path.lineWidth = 3
//        bezier2Path.stroke()
//
//
//        //// Bezier Drawing
//        let bezierPath = UIBezierPath()
//        bezierPath.move(to: CGPoint(x: 75.5, y: 3.5))
//        bezierPath.addLine(to: CGPoint(x: 75.5, y: 141.5))
//        fillColor.setFill()
//        bezierPath.fill()
//        fillColor.setStroke()
//        bezierPath.lineWidth = 3
//        bezierPath.stroke()
//
//
//        //// Bezier 3 Drawing
//        let bezier3Path = UIBezierPath()
//        bezier3Path.move(to: CGPoint(x: 78.5, y: 3.5))
//        bezier3Path.addCurve(to: CGPoint(x: 76.27, y: 141.5), controlPoint1: CGPoint(x: -46.19, y: 72), controlPoint2: CGPoint(x: 76.27, y: 141.5))
//        fillColor.setStroke()
//        bezier3Path.lineWidth = 3
//        bezier3Path.stroke()
//
//
//        //// Bezier 6 Drawing
//        let bezier6Path = UIBezierPath()
//        bezier6Path.move(to: CGPoint(x: 72.5, y: 3.5))
//        bezier6Path.addCurve(to: CGPoint(x: 74.73, y: 141.5), controlPoint1: CGPoint(x: 197.19, y: 72), controlPoint2: CGPoint(x: 74.73, y: 141.5))
//        UIColor.black.setStroke()
//        bezier6Path.lineWidth = 3
//        bezier6Path.stroke()
//
//
//        //// Bezier 8 Drawing
//        let bezier8Path = UIBezierPath()
//        bezier8Path.move(to: CGPoint(x: 78.5, y: 3.5))
//        bezier8Path.addCurve(to: CGPoint(x: 77.35, y: 141.5), controlPoint1: CGPoint(x: 13.93, y: 72), controlPoint2: CGPoint(x: 77.35, y: 141.5))
//        fillColor.setStroke()
//        bezier8Path.lineWidth = 3
//        bezier8Path.stroke()
//
//
//        //// Bezier 9 Drawing
//        let bezier9Path = UIBezierPath()
//        bezier9Path.move(to: CGPoint(x: 72.5, y: 3.5))
//        bezier9Path.addCurve(to: CGPoint(x: 73.73, y: 141.5), controlPoint1: CGPoint(x: 141.52, y: 72), controlPoint2: CGPoint(x: 73.73, y: 141.5))
//        fillColor.setStroke()
//        bezier9Path.lineWidth = 3
//        bezier9Path.stroke()
//        
//        context.restoreGState()
//
//    }

    @objc dynamic public class func drawElement(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 183, height: 107), resizing: ResizingBehavior = .aspectFit, fillColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 183, height: 107), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 183, y: resizedFrame.height / 107)


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 175.5, y: 52.02))
        bezier3Path.addLine(to: CGPoint(x: 5.5, y: 101.5))
        bezier3Path.addLine(to: CGPoint(x: 5.5, y: 5.5))
        bezier3Path.addLine(to: CGPoint(x: 175.5, y: 52.02))
        bezier3Path.close()
        fillColor.setFill()
        bezier3Path.fill()
        fillColor.setStroke()
        bezier3Path.lineWidth = 3
        bezier3Path.stroke()
        
        context.restoreGState()

    }




    @objc(StartResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
